apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'

android {
    compileSdkVersion 29
    buildToolsVersion "29.0.3"

    defaultConfig {
        applicationId "com.linwei.wsmaterialui"
        minSdkVersion 16
        targetSdkVersion 29
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    signingConfigs {
        debug {
            keyAlias "${SIGNING_KEYALIAS}"
            keyPassword "${SIGNGING_CERTIFICATEPASSWORD}"
            storeFile file("${SIGNING_CERTIFICATE}")
            storePassword "${SIGNGING_STOREPASSWORD}"
        }
        release {
            keyAlias "${SIGNING_KEYALIAS}"
            keyPassword "${SIGNGING_CERTIFICATEPASSWORD}"
            storeFile file("${SIGNING_CERTIFICATE}")
            storePassword "${SIGNGING_STOREPASSWORD}"
        }
    }

    buildTypes {
        debug {
            minifyEnabled false //混淆
            shrinkResources false // 是否去除无效的资源文件
            buildConfigField "boolean", "showLog", "true"//是否显示Log
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.debug
        }
        preview {
            minifyEnabled false //混淆
            shrinkResources false // 是否去除无效的资源文件
            buildConfigField "boolean", "showLog", "true"//是否显示Log
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.release
        }
        release {
            minifyEnabled true //混淆
            shrinkResources true // 是否去除无效的资源文件
            buildConfigField "boolean", "showLog", "false"//是否显示Log
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.release
        }
    }

    //修改打包信息
    android.applicationVariants.all { variant ->
        def outFileName
        def flavorName = variant.flavorName //获取渠道名
        variant.outputs.all { output ->
            def flavorVerName = variant.mergedFlavor.versionName //获取渠道版本名
            if (variant.buildType.name == "release") {//正式
                outFileName = "${flavorName}_${flavorVerName}.${buildTime()}_prd.apk"
            } else if (variant.buildType.name == "preview") {//测试预览
                outFileName = "${flavorName}_${flavorVerName}.${buildTime()}_uat.apk"
            } else {//开发包
                outFileName = "${flavorName}_${flavorVerName}.${buildTime()}_dev.apk"
            }
            output.outputFileName = outFileName
        }
    }
}

//构建包时间
def buildTime() {
    return new Date().format("MMdd_HHmm", TimeZone.getTimeZone("GMT+8"))
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
    implementation 'androidx.appcompat:appcompat:1.1.0'
    implementation 'androidx.core:core-ktx:1.3.0'
    implementation 'androidx.constraintlayout:constraintlayout:1.1.3'
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'androidx.test.ext:junit:1.1.1'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.2.0'

    implementation project(':inputboxwidget')
}
